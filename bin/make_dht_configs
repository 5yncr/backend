#!/usr/bin/env python
import argparse
import json
import os

from syncr_backend.constants import DEFAULT_DPS_CONFIG_FILE
from syncr_backend.constants import DEFAULT_PKS_CONFIG_FILE
from syncr_backend.init.node_init import get_full_init_directory


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "listenport",
        type=str,
        help='Port to listen on for DHT',
    )
    parser.add_argument(
        "--bootstrap-ips",
        type=str,
        help='IP of the DHT bootstrap',
    )
    parser.add_argument(
        "--bootstrap-ports",
        type=int,
        help='Port of the DHT bootstrap',
    )
    args = parser.parse_args()

    iplist = args.bootstrap_ips.split(',')
    portlist = list(map(lambda x: int(x), args.bootstrap_ports.split(',')))
    if len(iplist) != len(portlist) or len(iplist) == 0:
        raise Exception("Must have at least 1 bootstrap ip")
    config = {
        'type': 'dht',
        'bootstrap_ips': iplist,
        'bootstrap_ports': portlist,
        'listen_port': args.listenport
    }

    init_directory = get_full_init_directory(None)
    pks_config_path = os.path.join(init_directory, DEFAULT_PKS_CONFIG_FILE)
    dps_config_path = os.path.join(init_directory, DEFAULT_DPS_CONFIG_FILE)

    with open(pks_config_path, 'w') as f:
        json.dump(config, f, ensure_ascii=False)
    print("PublicKeyStore DHT Config file created at: {}"
          .format(pks_config_path))

    with open(dps_config_path, 'w') as f:
        json.dump(config, f, ensure_ascii=False)
    print("DropPeerStore DHT Config file created at: {}"
          .format(dps_config_path))


if __name__ == '__main__':
    main()
