[tox]
envlist = py3
docker_compose_version = 1.20.1

[testenv]
basepython = python3
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
commands =
    py.test {posargs:tests}

[testenv:coverage]
basepython = python3
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
commands =
    coverage run -m pytest {posargs:tests}
    coverage report --omit=".tox/*"
    coverage html --omit=".tox/*"
    coverage report --include 'tests*' --fail-under 100

[testenv:mypy]
basepython = python3
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
setenv =
    MYPYPATH = {toxinidir}
mypy_paths =
    syncr_backend
    tests
commands =
    mypy --disallow-untyped-defs --strict-optional {posargs:{[testenv:mypy]mypy_paths}}

[testenv:itests_simple]
changedir=itests/
deps =
    docker_compose=={[tox]docker_compose_version}
commands =
    docker-compose down
    docker-compose --verbose build
    docker-compose run --rm node1 /work/itests/basic_test.sh

[testenv:itests_complex]
changedir=itests/
deps =
    docker_compose=={[tox]docker_compose_version}
commands =
    docker-compose down
    docker-compose --verbose build
    docker-compose up -d tracker hostnode
    docker-compose run --rm syncnode /work/itests/syncnode.sh
    docker-compose stop
    docker-compose rm --force

[testenv:itests_dht]
changedir=itests/
deps =
    docker_compose=={[tox]docker_compose_version}
commands =
  docker-compose down
  docker-compose --verbose build
  docker-compose up -d dht_node dht_node2
  docker-compose up -d hostnode_dht
  docker-compose run --rm syncnode_dht /work/itests/syncnode.sh
  docker-compose stop
  docker-compose rm --force

[testenv:docs]
changedir=docs/
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
commands =
    python build.py {posargs}

[testenv:lint]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
whitelist_externals =
    sh
commands =
    flake8 syncr_backend tests
    pycodestyle syncr_backend tests
    pydocstyle syncr_backend --match-dir='(?!bin).*'
    sh -c "find syncr_backend | grep -v "/bin/" | grep "\.py$" | xargs validatedoc"
    pipenv check

[testenv:doctest]
changedir=docs/
desp =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
whitelist_externals =
    make
commands =
    make doctest
